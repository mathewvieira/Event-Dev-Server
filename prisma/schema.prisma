generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model community {
  id                      Int                      @id @default(autoincrement())
  supertokens_id          String                   @unique @db.VarChar(255)
  logo_url                String                   @db.VarChar(255)
  link_instagram          String?                  @db.VarChar(255)
  link_linkedin           String?                  @db.VarChar(255)
  link_website            String?                  @db.VarChar(255)
  link_github             String?                  @db.VarChar(255)
  created_at              DateTime                 @default(now()) @db.Timestamp(6)
  description             String?                  @db.VarChar(255)
  is_active               Boolean                  @default(true)
  name                    String                   @db.VarChar(255)
  phone_number            String?                  @db.VarChar(255)
  updated_at              DateTime?                @default(now()) @updatedAt
  event                   event[]
  post                    post[]
  users                   community_user[]
  users_requests          community_user_request[]
}

model address {
  id            Int      @id @default(autoincrement())
  cep           String   @db.VarChar(8)
  state         String   @db.VarChar(25)
  city          String   @db.VarChar(50)
  neighborhood  String   @db.VarChar(50)
  streetAddress String   @db.VarChar(50)
  number        String   @db.VarChar(10)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
  event         event[]

  @@index([state, city])
}

model event {
  id              Int       @id @default(autoincrement())
  capa_url        String    @db.VarChar(255)
  link            String?   @db.VarChar(255)
  created_at      DateTime  @default(now())
  description     String    @db.VarChar(255)
  end_date_time   DateTime  @db.Timestamp(6)
  event_online    Boolean?  @default(false)
  id_community    Int
  is_active       Boolean   @default(true)
  start_date_time DateTime  @db.Timestamp(6)
  title           String    @db.VarChar(255)
  updated_at      DateTime  @default(now()) @updatedAt
  id_address      Int
  address         address   @relation(fields: [id_address], references: [id], onDelete: Cascade)
  community       community @relation(fields: [id_community], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model post {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  id_community Int
  is_active    Boolean   @default(true)
  text         String    @db.VarChar(255)
  updated_at   DateTime? @db.Timestamp(6)
  community    community @relation(fields: [id_community], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model user {
  id               Int                      @id @default(autoincrement())
  supertokens_id   String                   @unique @db.VarChar(255)
  email            String                   @unique @db.VarChar(255)
  password         String                   @db.VarChar(255)
  function         String                   @db.VarChar(255)
  usuario_root     Boolean?                 @default(false)
  is_active        Boolean                  @default(true)
  updated_at       DateTime?                @db.Timestamp(6)
  created_at       DateTime                 @default(now()) @db.Timestamp(6)
  communities      community_user[]
  communityRequests community_user_request[]
}

enum community_user_roles {
  LEADER
  MEMBER
}

model community_user {
  community_id Int
  user_id      Int
  role         community_user_roles @default(MEMBER)
  community    community            @relation(fields: [community_id], references: [id], onDelete: Cascade)
  user         user                 @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([community_id, user_id])
}

enum community_user_request_status {
  PENDING
  APPROVED
  REJECTED
}

model community_user_request {
  community_id Int
  user_id      Int
  message      String?                  @db.VarChar(255)
  status       community_user_request_status @default(PENDING)
  created_at   DateTime                 @default(now()) @db.Timestamp(6)
  updated_at   DateTime                 @default(now()) @updatedAt

  community    community                @relation(fields: [community_id], references: [id], onDelete: Cascade)
  user         user                     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([community_id, user_id])
}
